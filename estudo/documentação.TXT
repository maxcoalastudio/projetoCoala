"Passo a passo da criação da engine em python"
_criando o ambiente virtual venv dentro da pasta do projeto vamos usar o comando no terminal:
python -m venv NomeDoAmbiente
venv\Scripts\activate  

_criando o repositorio dentro da pasta principal da engine
git init
git add .
git commit - m "criando uma engine"
git branch -M main #trocando o nome da branch principal
git remote add origin https://github.com/maxcoalastudio/RepositorioCriadoNoGit.git
git push -u origin main # empurrando conteudo para a pasta de origem

git add .
git commit - m "primeiro commit"
git push

pip install PyOpenGL PyOpenGL-accelerate (para instalar o OpenGL e otimização) 
vamos usar uma biblioteca para abrir janelas, vamos usar o GLFW , sendo leve, facil de instalar e de usar
pip instal glfw (grafic library framework)

vamos conferir com "pip list" e verificar python 3.8.10, pythonOpenGL 3.1.7, GLGW 2.6.2, VS CODE 1.93.1


no decorrer das aulas vamos instalando mias bibliotecas.

vamos apenas abrir uma janela com glfw

vamos criar uma função main
import glfw
#Função Principal
def main():
    glfw.init()
    #criando a janela(largura e altura, nome da janela, monitor, janela compartilhada)
    window= glfw.create_window(500,500,'Itro V0.1', None, None)
    glfw.make_context_current(window)
    while not glfw.window_shoud_close(window):
	glfw.poll_events()
	swap_buffers(window)
    glfw.terminate()

if __name__ == '__main__':
    main()

muitas funções do GLFW usam um objeto que essa função retorna do tipo janela, vamos add essa função dentro de uma variavel "window"
e a primeira função que ja vai usar esse objeto é a função de contexto de openGL atual do glfw
openGL é uma maquina de estados, onde um estado é definido pelos valores atuais das variaveis interna do openGL, e um contexto do openGl armazena 
todas essas variaveis internas e mantem o estado da OpenGL
do jeito que fizemos vamos abrir e fechar a janela automaticamente
para manter ela aberta vamos fazer um laço , diferente da GLUT, aqui precisamos usar o uma condição dentro da GLFW que é normalmente Falsa mas se torna Verdadeira quando você clica no X da janela
então usamos o while  pra conferir esse evento, e colocamos a nossa janela pra ser fechada caso ela seja Verdadeira
e colocamos um poll_events(), mesmo que nossa aplicação nesse momento não va fazer tratamento de teclado mouse etc, o clique do X deve ser tratado com essa inbstrução
mas tem outra variante que não interrompe a execução do laço glfw.wait_events(), enquanto esse que estamos usando interrompe
vamos usar uma ultima instrução pra mostrar a janela que é a swap_buffers(window), o glfw por padrao usa 2 frame buffers enquanto é executado , um fica exibido na janela, enquanto o outro fica atras em background desenhado enquanto isso.
usamos o terminate fora do laço depois que o x for pressionado, para poder fechar o glfw
analisando instruções do openGL
glfw.swap_buffers(window) empurra um framebuffer ou seja uma imagem para uma janela(uma região da memoria onde armazena informações de cor para cada pixel, ou seja ela é uma matriz contendo os valores de rgb de cada pixel, esses valores sao pontos flutuantes indo de 0 a 1

se eu quiser desenhar qualquer coisa na tela vou ter que desenhar no frame buffer pra ele jogar pra tela
pra organizar nossa aplicação vou escrever duas funções com finalidades diferentes
pra organizar nossa aplicação vou chamar ele de init() #função para configurações iniciais da minha aplicação
e a render() # tem a finalidade de atualizar a renderização da cena

o framebuffer tem que ser inicializado por que como é um espaço de memoria , ele vem com lixo de memoria , então tem que limpar esse espaço
nas configurações iniciais eu vou colocar uma cor padrao a ser colocado no fundo da minha janela , vamos usar a instrução glClearColor(1, 1, 1, 1)
ela nao vai limpara ainda o frame buffer , ela so vai definir a cor de fundo , e para isso não vamos esquecer de importar a lib do openGl que é OpenGL.GL


import glfw
from OpenGL.GL import * 
#Função PARA CONFIGURAÇÕES INICIAIS DA MINHA aplicação
def init():
    glClearColor(1, 1, 1, 1)#cor do fundo da janela

#função para atualizar a renderização da cena
def render():
    glClear(GL_COLOR_BUFFER_BIT)#limpeza do framebuffer(informações dos pixels) alem do buffer de cores ela limpa outros buffers, mas queremos so as cores(GL_COLOR_BUFFER_BIT)

#Função Principal
def main():
    glfw.init()
    #criando a janela(largura e altura, nome da janela, monitor, janela compartilhada)
    window= glfw.create_window(500,500,'Itro V0.1', None, None)
    glfw.make_context_current(window)
    init()
    while not glfw.window_shoud_close(window):
	    glfw.poll_events()
        render()
	    swap_buffers(window)
    glfw.terminate()

if __name__ == '__main__':
    main()

#criei as duas funções mas nao estou colocando elas em canto nenhum, se a init é de conmfigurações iniciais temos que chamala antes de começãr o laço   
#e a função render é pra atualizar a cena o tempo inteiro então vou colocala dentro do laço , entre o tratamento de eventos e a troca de frame buffers
#agora que eu ja inicializei o framebuffer com uma cor de fundo nele 
#vamos tentar desenhar alguma coisa
# o ogpengl possui um sistemas de coordenadas onde definimos nossos objetos, na matematica o sistemas de coorenadas é infinito teoricamente
entao a opengl foi necessaria definir uma area especifica que vai ser escolhida para ser exibida na tela 
no caso da opengl a escolha foi de -1 a 1 isso nos 3 eixos
aumentando no eixo x da esquerda pra direita, o y de baixo para cima, e o z do fundo para frente
vamos por enquanto desenhar apenas 2D
para desenharmos vamos usar instruções usando opengl legacy(versão antiga anteriores a versão 3.0) com pipeline de renderização fixa 
no opengl legacy para desenharmos qualquer coisa temos que colocar as instruções do desennho entre duas funções de inicialização e finalização 
glBegin() e glEnd()
entre esses dois vamos colocar os vertices do objeto na qual vamos criar, dentre esses tipos de objetos o opengl oferece alguns como TRIANGULOS, QUADRADOS, E outros
para usar triangulos usamos glBegin(GL_TRIANGLES)  onde usa conjuntos de 3 floats para cada vertice   

import glfw
from OpenGL.GL import * 
#Função PARA CONFIGURAÇÕES INICIAIS DA MINHA aplicação
def init():
    glClearColor(1, 1, 1, 1)#cor do fundo da janela
#função para atualizar a renderização da cena
def render():
    glClear(GL_COLOR_BUFFER_BIT)#limpando o buffer dos pixels

    glBegin(GL_TRIANGLES)
    glVertex2f(-0.5, -0.5)
    glVertex2f(0.5, -0.5)
    glVertex2f(0.0, -0.5)
    glEnd()


#Função Principal
def main():
    glfw.init()                                                                         #inicializando a API GLFW
    #criando a janela(largura e altura, nome da janela, monitor, janela compartilhada)
    window= glfw.create_window(500,500,'Itro V0.1', None, None)
    glfw.make_context_current(window)                                                   #CRIANDO O CONTEXTO OpenGL da janela
    init()
    while not glfw.window_shoud_close(window):                                          #Enquanto a janela nao é fechada
	    glfw.poll_events()                                                              #tratamento de eventos
        render()
	    swap_buffers(window)                                                            #troca de frame buffer(informação de cores dos pixels)
    glfw.terminate()                                                                    #finaliza a API GLFW

if __name__ == '__main__':
    main()

#se rodarmos a plicação a janela nao vai aparecer nada por que todos elementos são brancos 
para eu alterar a cor do triangulo, vou add antes do glBegin uma função que espera 3 flutuante glColor3f()
poderi aser 4f com a cor alpha mas vamos nos ater apenas nisso por enquanto

se eu colocar glColor3f antes de desenhar um vertice, ele vai interpolar a cor dele com as outras cores

se eu colocar antes da geometria interia ele colore os tres vertices e interpola com a mesma cor
a interpolação é bilinear , tem uma suavização entre as interpolações de cores.
queremos transitar para o opengl moderno, então nao queremos ficar pra sempre no legacy

ao invez de ficar colocando glvertex com  coordenada a coordenada, vamos criar um tipo de lista contendo todas as coordenadas , vamos criar um laço passando por todas as coordenadas , vamos criar um

vamos criar globalmente a lista vertices = [], na qual vai conter as tres coordenadas
#depois das importações das libs vai ficar assim 
vertices = [
    [-0.5, -0.5],
    [0.5, -0.5],
    [0.0, 0.3]
]
# a função render fica assim :
def render():
    glClear(GL_COLOR_BUFFER_BIT)#limpando o buffer dos pixels
    glColor3f(1,0,0)                                                                   
    glBegin(GL_TRIANGLES)
    for v in vertices:
        glVertex2fv(v)
    glEnd()

# nesse caso estamos add uma cor fixa para cada vertice, normalmente a maioria das aplicações temos um atributo deiferente pra cada vertice, e outros atributos
vamos criar tambem uma lista global para cores  logo abaixo da lista vertices, um pra cada vertice 
cores = [
    [1,0,0],
    [0,1,0],
    [0,0,1]
]

nao vamos usar mais o glColor3f na função render

quero fazer um laço que passe pelas duas listas e defina uma cor para cada vertice

então podemos colocar duas variaveis no for como se fosse uma tupla 
for v, c in vertices, cores:
mas assim vai dar um erro, para poder fazer fazer um laço e transitar entre duas listas  ao mesmo tempo e colocando as duas e conectando elas com a instrução zip
for v, c in zip(vertices, cores):
ela pega as duas listas e fazer um par pra cada indice equivalentes de cada lista
[vertices] [cores] em ordem
glBegin(GL_TRIANGLES) 
for v, c in zip(vertices, cores):
    glVertex3fv(c)                  #esse v no final indica que estou passando todos os valores RGB de uma so vez
    glVertex2fv(v)                  
glEnd() 

o uqe é primitiva ?
primitiva são componentes que uma ferramenta oferece ao programador para montar o seus objetos
no caso da opengl são bem simples e descritas em um sistema de coordenadas 
assista video 7 

no nosso projeto temos uma lista de vertices 
vertices = [
    [-0.8, -0.4],
    [-0.4, -0.8],
    [0.4, -0.8],
    [0.8, -0.4],
    [0.8, 0.4],
    [0.4, 0.8],
    [-0.4, 0.8],
    [-0.8, 0.4],
]

como vou desenhar eles ?
são 8 pares de coordenadas [x , y] 
vamos desenhar , no opengl legacy quando formos desenhar quaquer coisa e digitar o par de comandos que inicializa e que fecha como se fosse uma tag.
glBegin() e a glEnd()
e a primeira primitiva que vamos desenhar é a primitiva GL_POINTS que desenha pontos na tela
glBegin(GL_POINTS)
vamos passar um laço por nossos vertices e vamos dizer qual tipo de dado vamos passar um vertex(processamento) 2D que é float e indica vertices()um conjunto de valos em um unico parametro
se eu quiser alterar a cor do sistema para uma cor diferente eu posso apenas passar antes dos pontos o glColor3f que rebresenta 3 cores no caso rgb, e passar 3 valores que va de 0 a 1 floats
se quiser alterar o tamanho padrão que é 1 pixel usando a instrução glPointSize(tamanho)

agora abaixo do glEnd() vamos desenhar segmentos de retas usando o GL_LINES
glBegin(GL_LINES) E VAMOS PASSAR OS MESMOS VERTICES DE ANTES SO QUE USANDO A PRIMITIVA GL_LINES
for l in vertices:
    glVertex2fv(l)
glEnd()
ele vai desenhar 4 segmentos de retas , ou seja 8 vertices com r pares de retas ,para conectar todos teriamos que digitar a instrução d vertice novamente
a linah tem a largura de um pixel tambem , se quisermos alterala tambem podemos usar o glLineWidth(tamanho em pixels)
a terceira primitiva de hoje que vai ser uma sequencia de seguimentos de retas  vamos usar a primitiva GL_LINE_STRIP

glBegin(GL_LINE_STRIP)
    for ls in vertices:
        glVertex2fv(ls)
glEnd()

a proxima primitiva é GL_LINE_LOOP ela fecha o circuito das linhas por onde começou

glBegin(GL_LINE_LOOP)
    for lp in vertices:
        glVertex2fv(lp)
glEnd()
 então essas são as primitivas pra desenhar pontos e linhas (GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP)

 AGORA VAMOS aprender a preencher areas , por que ate agora só criamos linhas e pontos

 a opengl moderna so tem primitivas para criar triangulos GL_TRIANGLES
 E SE USARMOS ELE para o nossos pontos atuais , vc vai perceber que ele apenas vai formar 2 triangulos pois ele salta o vertice para o proximo

podemos observar tambem que não tem as linhas de bordas , ele renderiza apenas a area interna , e se eu passar os mesmos vertices pra esse modelo não iria funcionar a contornar os triangulos , e em falar nisso temos um jeito de renderizar essas arestas de forma inteligente
antes de chamar o desenho da ultima primitiva glPolygonMode(LG_FRONT_AND_BACK, GL_FILL) e essa função muda como é rasterizado os poligonos
ela recebe 2 argumentos, o primeiro é que tipo de faces queremos alterar o modo de renderização, O SEGUNDO É a cor de preenchimento, SE QUISERMOS o modo wire frame podemos colocar ao invez de GL_FILL  usamos o GL_LINE
mas tem uma forma melhor de fazer isso usando shaders mas ja da pra demonstrar

    glPolygonMode(GL_FRONT, GL_FILL)
    glBegin(GL_TRIANGLES)
    for lP in vertices:
        glVertex2fv(lP)
    glEnd() 
    
    glPolygonMode(GL_FRONT, GL_LINE)
    glColor3f(0, 0, 0)
    glBegin(GL_TRIANGLES)
    for lP in vertices:
        glVertex2fv(lP)
    glEnd()  

proxima primitiva!
vamos ver agora uma primitiva que desenha um loop de triangulos conectados pelo primeiro vertice, o GL_TRIANGLE_FAN 
glPolygonMode(GL_FRONT, GL_LINE)
    glColor3f(0, 0, 0)
    glBegin(GL_TRIANGLE_FAN)
    for lP in vertices:
        glVertex2fv(lP)
    glEnd()

vamos ver outro tipo de primitiva de trianglo , mas temos que mudar as ordens dos vertices , nosso modelo agora esta seguindo antihorario 
pra usarmos o GL_TRIANGLE_STRIP , temos que alternar um triangulo de baixo com de cima, nesse modo ele faz o primeiro triangulo com o primeiro vertice ,
mas do quarto vertice em diante ele vai se conectar com os dois ultimos, usando um algoritimo for com loop de vertice valor(indice) com vertice valor (indice-2)
isso é bom pra fazer uma sequencia de triangulos como laterais de cilindros 

bom essas são as primitivas mais comuns e mais usadas no opengl moderno

o legacy removel as outras formas primitivas.

vamos entrar de vez no opengl moderno
vamos trabalhar em enviar os dados para a memoria vram(memoria da placa de video)
isso de forma mais eficiente do que a forma que ja fizemos 
isso torna a execução da aplicação muito mais rapida    
o Opengl dispoe de uma ferramenta pra isso o Vertex Buffer Object (VBO) 
opengl legacy = são funções do opengl ate versão 3
opengl moderno = são funções que substituiram as do opengl legacy, que eram usados para fazer testes rapidos com serios problemas de eficiencia
quando vamos desenhar qualquer coisa usando o legacy temos que desenha usando glBegin e glEnd passando vertice a vertice
se meu modelo tiver mitos vertices eese modelo vai ser o gargalo da nossa eficiencia , pois a gpu so pode começar a desenha quando o loop  acabar de enviar 
so consigo renderizar a cena inteira quando enviar todo mundo enquanto o laço esta rodando na cpu

então uma ideia que surgiu quando aconteceu este tipo de gargalo foi a seguinte: e se pudermos alocar uma espaço dentro da vram(memoria de video da placa de video)
ai enviamos o conteudo todo de uma vez e deixo direto lá sem precisar ficar enviando coordenada por coordenada o tempo todo
essa é a ideia do vertex buffer object (VBO) um espaço de memoria dentro da placa de video usada pra receber nossos objetos
VBO = espaço alocado dentro da VRAM para nossos objetos não precisar passar pela cpu
vamos criar nosso script vbo_vba.py
import glfw
from OpenGL.GL import * 
width, height = 1920, 1080
vertices = [
    [-0.8, -0.8],
    [0.0, -0.8],
    [-0.4, 0.0],
    [0.0, -0.8],
    [0.8, -0.8],
    [0.4, 0.0],
    [-0.4, 0.0],
    [0.4, 0.0],
    [0.0, 0.8],
]
#Função PARA CONFIGURAÇÕES INICIAIS DA MINHA aplicação
def init():
    glClearColor(1, 1, 1, 1)#cor do fundo da janela
#função para atualizar a renderização da cena
def render():
    glClear(GL_COLOR_BUFFER_BIT)                                                        #limpando o buffer dos pixels

    glColor3f(1,0,0)                                          
    glBegin(GL_TRIANGLES)                                                               #função desenha inicio com um parametro de primitiva
    for v in vertices:
        glVertex2fv(v)                                                                  #desenhando cada vertice em seu lugar 
    glEnd() 
#Função Principal
def main():
    glfw.init()                                                                         #inicializando a API GLFW
    #criando a janela(largura e altura, nome da janela, monitor, janela compartilhada)
    window = glfw.create_window(width, height, 'Coala Engine Ver0.0.1', None, None)
    glfw.make_context_current(window)                                                   #CRIANDO O CONTEXTO OpenGL da janela
    init()
    while not glfw.window_should_close(window):                                         #Enquanto a janela nao é fechada
        glfw.poll_events()                                                              #tratamento de eventos
        render()	    
        glfw.swap_buffers(window)                                                       #troca de frame buffer(informação de cores dos pixels)
    glfw.terminate()                                                                    #finaliza a API GLFW

if __name__ == '__main__':
    main()


esse script se parece com o antigo mas desenha a trindade de Th Legend of zelda  

agora nosso objetivo é enviar a lista de vertices pra VRAM o primeiro passo é importar o modulo numpy as np 
estamos insirindo esse modulo por que vamos ter que passar esses vertices para a memoria da placa de video 
so que como o python usa tipagem dinamica e não sabemos a definição da memoria que ele esta usando (float32bits, float64bits, doble ) 
quem programa em linguagem c++ tem vantagens ja que usam valores fixos e tipagem estatica
então vamos usar uma função de numpy para converter a nossa lista de vertices para uma lista de floats de 32 bibliotecase para fazer isso
primeiro que vamos ter que ter acesso global dos vertices então dentro de init() vamos fazer
global vertices 
e abaixo da limpeza de fundo da janela vamos fazer 
vertices = np.array(vertices, np.dtype(np.float32)) # o primeiro argumento é a lista de valores, o segundo é o tipo de valor e dentro desse dtype fica sendo float32
entao agora temos varias lista dentro de uma e nas listas temos valores setados com floats de 32 bits ou 4bytes

agora vamos enviar estes valores para nossa placa de video
e percebaque estamos fazendo no init e nao no render , pois vamos fazer isso uma unica vez 
o objetivo é otimizar então apenas uma vez basta

as instruçõe que vamos precisar são 3:
1#criar o VBO(vertex buffer object) 
2#tornar o VBO ativo por que quando criamos o objeto ele não esta ativo pois o opengl é uma maquina de estado
3#eviar  os dados para esse VBO

#1 A INSTRUÇÃO PARA CRIAR UM vertex buffer object
vboId = glGenBuffer(1)  # ele pede dois parametros , o primeiro é o numero de buffers que devem ser gerados , no caso nosso 1, o segundo é um ponteiro para array de ids de buffers mas em python não é necessario por que o retorno da função é o id do buffer ou uma lista de ids
no c++ o parametro de buffers é usado para a saida por que a variavel é escrita devido a passagem por referencia
vamos colocar o conteudo em uma variavel
o vbo não tem tamanho e nem esta ativo

#2 tornando o vbo ativo
glBindBuffer: essa instrução voce diz o seguinte  o tipo de buffer que vamos desejar ativo no caso é GL_ARRAY_BUFFER, e existem varios tipos de buffer mas vamos usar esse que é um array
glBindBuffer(GL_ARRAY_BUFFER, vboId) # que pede 2 parametros o alvo dos buffers que sera conectada e o segundo é o buffer que é o id de um buffer
o segundo argumentosendo sendo o indentificador que acabamos de criar(VBO)
agora vamos usar a instrução de enviar os dados glBufferData() com os parametros target: especifica o tipo de buffer a quao o buffer sera conectados, size Especifica o tamanho em bytes do buffer, data especifica o ponteiro para os dados que serão copiados, usage especifica o padrão de uso esperado para os dados
glBufferData(GL_ARRAY_BUFFER, #tipo de buffer
            vertices.nbytes, #o tamanho em bytes dos valores dos vertices (9 vertices x 2valores de pontos flutuantes= 18, 18 x 4bytes = 64 bytes  mas podemos usar o campo do ARRAY que calcula esse valor automaticamente que é o .nbytes)
            vertices, #aqui entra os dados 
            GL_STATIC_DRAW )#os tipos de uso são leitura(GL_STATIC_READ), levar dados pra fazer desenhos uma vez (GL_STATIC_DRAW), levar os dados e ficar alterando o tempo inteiro(GL_DYNAMIC_DRAW)
vamos usar os dados desse buffer pra desenha e não modificar os dados desse buffers sem mudar as coordenadas, a nao ser que eu fosse fazer por exemplo uma animação 

deposi de enviar os dados eu ainda não posso pedir pra desenhar , pois o opengl não sabe que dados são esses, se são cores , coordenadas , vetores, matrizes, 2D ou 3D
DEPOIS DE ENVIAR os dados do buffer , descrever como estão organizados os dados dentro desse buffer, oque vammos chamar de descrição atributo   
glVertexAttribPointer(0, #codigo do atributo(posição do vertice)
                      2, # nossos valores são 2D então são 2 valores de ponto flutuante
                      GL_FLOAT, # qual tipo de valores dos nossos atributos, no caso é float
                      FL_FALSE, #NORMALIZAÇÃO um campo ficar entre 0 e 1, como normalizar o valor de 1 a 255 de cores como 0 a 1, mas não vamos normalizar
                      2*4, # de aquantos em quantos bytes vou ter que pular dentro do meu buffer pra proxima posição, seria 2 floar, ou seja 2x4bytes = 8bytes
                      ctypes.c_void_p(0), # onde que esse atributo começa ? no começo no meio ? o nosso atributo começa pelo 0, porem o problema que a API OpenGL ela foi escrita com a linguagem C em mente e esse valor não era pra ser 0 e sim um ponteiro para memoria da linguagem  C e python não trabalha com ponteiros , vamos fazer uma minigambiarra aqui !, vamos importar o modulo ctypes no nosso script(um modulo do python pra usar tipos da linguagem C) e vamos usar o c_void_p() um endereço de memoria que foi feito pra apontar pra quaquer coisa  
) #parametros(indice: um atributo de vertice, size: numero de componentes por atributo,type: tipo de dados de cada componentes, normalized: especifica os valores que tem que ser normalizados, stride:especifica o espaçamento em bytes entre dois atributos consecutivos, pointer: Especifica o deslocamenrto do primeiro componente do artibuto em relação aos dados do buffer)
agora vamos tornar nosso atributo ativo
glEnableVertexAttribArray(0)#o 0 aqui é o codigo definido para o atributo, é o primeiro elemento que definimos na função anterior

no opengl moderno não é suficiente criar um VBO(vertex buffer Object) temos que criar tambem VAO(vertex array Object)
um vertex array Object é como se fosse um objeto que incorpora o vbo quanto os atributos que descrevemos pra ele, ele encapsula tudo dentro de um objeto
vamos criar ele primeiro acima de vboId
vaoId = glGenVertexArrays(1) # o 1 é aa quantidade de vertex array a serem gerados 
vamos tornalo ativo 
glBindVertexArray(vaoId) #ativado e quando ele esta ativado tudo que esta sendo definido depois dele agora é como se estivesse sendo incorporado dentro do objeto vaoId
entaão no final do codigo podemos desativar ou não , caso eu queira varios objetos na minha cena eu não posso deixalo ativo 
glBindVertexArray(0) tornando ele inativo, e podemos acima dele tornar o buffer inativo, ja que ele fica dentro do array
glBindBuffer(, GL_ARRAY_BUFFER, 0) # esse fica acima

vamos n função render e tornar o buffer ativo abaixo da limpeza dos buffers

glBindVertexArray(vaoId)# percebe que esse vaoId é uma variavel local da função init, então defina ele globalmente abaixo da lista de vertices 
vaoId = 0
dentro do init() vamos complementar 
global vertices, vaoId 
agora a referencia pra variavel dentro de init é a que esta global e portanto podemos acessala no render
glDrawArray(GL_TRIANGLES, # primitiva
            0, #posição de inicio do desenho
            qtdVertices, quantos elementos queremos passar, podemos colocar abaixo da definição da lista de vertices uma variavel qtdVertices = len(vertices), assim não precisamos passar sempre a quantidade, sendo que podemos desenhar mais verticves e triangulos 
)# essa instrução que substitui o glBegin e glEnd , e ele recebe tres argumentos (mode: primitiva a ser desenhada, first: o indice inicial do vao ativo no momento, count: quantidade de vertices a serem renderizados)
e depois disso desativo 
glBindVertexArray(0) # 0 sendo o codigo do objeto, ele agora deveria desenha porem o opengl moderno desenha usando shaders(programs que afetem o processamento de vertices e processamento de fragmento) 

